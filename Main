import javax.swing.JOptionPane;
import java.util.*;
import java.io.*;


public class Main {

    // use this to read in a matrix as long as you know DB name, DB path, number of rows, collumns



    public static String[][][] coordinatesData(String[][] BigMatrix,String[] SpeciesMatrix){
        String[][][] outputDataBase=new String[SpeciesMatrix.length][1248][2];
        for(int i=0;i<SpeciesMatrix.length;i++) {
            for(int j=0;j<BigMatrix.length;j++){
                    if(BigMatrix[j][0].equals(SpeciesMatrix[i])){
                        for(int k=0;k<outputDataBase[0].length;k++){
                            if(outputDataBase[i][k][0]==null) {
                                outputDataBase[i][k][0] = BigMatrix[j][1];
                                outputDataBase[i][k][1] = BigMatrix[j][2];
                                break;
                            }
                    }
                }
            }
        }
        return outputDataBase;
    }

    public static boolean allTrue(boolean[] AllTrue){
        boolean Final=true;
        for(int i=0;i<AllTrue.length;i++){
            if(!AllTrue[i])
                Final=false;
        }
        return Final;
    }



    public static String[][] ReadDBnow(String DBpath, int rowno, int colno) throws IOException {

        //DBname eg. <"databaseKey.csv">, DBpath eg. <"C:/Users/sebmu/IdeaProjects/1stday/databaseKey.csv">

        String[][] arrayValues = new String[rowno][colno]; //The returned matrix

        //File file = new File(DBname);

        BufferedReader bufRdr = new BufferedReader(new FileReader(DBpath));
        String line = null;
        int row = 0;
        int col = 0;

        //read each line of text file
        while ((line = bufRdr.readLine()) != null) {
            StringTokenizer st = new StringTokenizer(line, ",");
            while (st.hasMoreTokens()) {
                //get next token and store it in the array
                arrayValues[row][col] = st.nextToken();
                col++;
            }
            col = 0;
            row++;
        }
        //close the file
        bufRdr.close();

        return arrayValues;
    }

    //Creates an array with all the species in it. ex: [aber, acra, aeru,...]
    public static String[] All177Species(String[][] BigMatrix){
        String [] Species=new String[BigMatrix[0].length-2];
        for (int x=0;x<BigMatrix[0].length-2;x++){
            Species[x]=BigMatrix[0][x];
        }
        return Species;
    }

    // Returns the index of the maximum double in a 1D array.
    public static int IndexMaxInArray(double[] arrayToFindMax){
        int indMax=0;
        double MAX=arrayToFindMax[0];
        for(int i=0; i<arrayToFindMax.length;i++){
            if (arrayToFindMax[i]>MAX){
                MAX=arrayToFindMax[i];
                indMax=i;
            }
        }
        return indMax;
    }

    // Returns the index of the maximum integer in a 1D array.
    public static int IndexMaxInArray(int[] arrayToFindMax){
        int indMax=0;
        int MAX=arrayToFindMax[0];
        for(int i=0; i<arrayToFindMax.length;i++){
            if (arrayToFindMax[i]>MAX){
                MAX=arrayToFindMax[i];
                indMax=i;
            }
        }
        return indMax;
    }


    // Returns the array with all the Criterias
    public static String[] FindCriteriaMatrix(String[][] BigMatrix, int Questionno) {
        String[] CriteriaMatrix = new String[Questionno];

        int c = 0;

        for (int i = 1; i < BigMatrix.length; i++) {
            CriteriaMatrix[c] = BigMatrix[i][0];

            while ((i < (BigMatrix.length - 1)) && (BigMatrix[i][1] != null)) {
                i += 1;
            }
            c += 1;
        }
        return CriteriaMatrix;
    }

    //Returns te array with all the questions
    public static String[][] FindSpeciesMatrix(String[][] BigMatrix, int Questionno, int TotalNoOfAnswers) {
        String[][] SpeciesMatrix = new String[Questionno][TotalNoOfAnswers];

        int c = 0;
        int s = 0;

        for (int i = 1; i < BigMatrix.length; i++) {
            while ((i < (BigMatrix.length - 1) && (BigMatrix[i][1] != null))) {
                SpeciesMatrix[c][s] = BigMatrix[i][1];
                s += 1;
                i += 1;
            }
            c += 1;
            s = 0;
        }
        return SpeciesMatrix;
    }

    //Returns the Database with all the ones and zeros
    public static String[][][] FindValuesMatrix(String[][] BigMatrix, int Questionno, int TotalNoOfAnswers) {

        String[][][] ValuesMatrix = new String[Questionno][TotalNoOfAnswers][BigMatrix[0].length-2];

        int c = 0;
        int s = 0;
        for (int i = 1; i < BigMatrix.length; i++) {
            while ((BigMatrix[i][1] != null) && (i < (BigMatrix.length - 1))) {
                for (int x = 2; x < BigMatrix[0].length; x++)
                    ValuesMatrix[c][s][x - 2] = BigMatrix[i][x];
                s += 1;
                i += 1;
            }
            c += 1;
            s = 0;
        }
        return ValuesMatrix;
    }

    //Resizes a 2D array and gets rid of all the nulls
    public static String[][] resizeArray(String[][] stringThingy){
        for(int i=0;i<stringThingy.length;i++){
            for(int j=0;j<stringThingy[i].length;j++){
                if(stringThingy[i][j]==null){
                    String[] resizedArray= new String[j];
                    for (int k=0;k<j;k++){
                        resizedArray[k]=stringThingy[i][k];
                    }
                    stringThingy[i]=resizedArray;
                    break;
                }
            }
        }
        return stringThingy;
    }

    //Resizes a 3D array and gets rid of all the nulls
    public static String[][][] reszeArray(String[][][] stringThingy){
        for(int i=0;i<stringThingy.length;i++) {
            for (int j = 0; j < stringThingy[i].length; j++) {

                    if (stringThingy[i][j][0] == null) {
                        String[][] resizedArray = new String[j][stringThingy[i][j].length];
                        for (int h = 0; h < j; h++) {
                            for (int l = 0; l < stringThingy[i][j].length; l++) {
                                resizedArray[h][l] = stringThingy[i][h][l];
                            }
                        }

                        stringThingy[i] = resizedArray;
                        break;

                    }

            }
        }
        return stringThingy;
    }

    //Transforms a String 3D array to a Integer 3D array
    public static double[][][] integerArray(String[][][] String3D){
        double[][][] finalArray= new double[String3D.length][String3D[0].length][String3D[0][0].length];
        for(int i=0;i<String3D.length;i++){
            finalArray[i]=new double[String3D[i].length][String3D[0][0].length];
        }
        for(int i=0;i<String3D.length;i++){
            for(int j=0;j<String3D[i].length;j++){
                for(int k=0;k<String3D[i][j].length;k++){
                    finalArray[i][j][k]=Double.parseDouble(String3D[i][j][k]);
                }
            }
        }
        return finalArray;
    }

    // Prints the Database (I fixed the problem with the lines !)
    public static void printDatabase(String[] CriteriaMatrix,String[][] SpeciesMatrix,double[][][] ValuesMatrix){
        for (int i = 0; i < CriteriaMatrix.length; i++) {
            System.out.println(CriteriaMatrix[i]);
            for (int j = 0; j < SpeciesMatrix[i].length; j++) {
                System.out.println(SpeciesMatrix[i][j]);
                for (int k = 0; k < (ValuesMatrix[i][j].length); k++)
                    System.out.print(ValuesMatrix[i][j][k]);
                System.out.println();
            }
        }

    }

    // The algorythm we defined in a group (can be modified, see the code)
    public static int algorythm(double[][][] ValueMatrix,double[] Pointforspecies,boolean[] AlredyAskedQuest){
        double[] EfficiencyIndex=new double[ValueMatrix[0][0].length];
        for(int i=0;i<ValueMatrix.length;i++) {
            if(!AlredyAskedQuest[i]){

            double index = 0;
                if(i==34||i==35){
                    for(int j=0;j<ValueMatrix[i].length;j++) {
                        int noZeros = 0;
                        int no0 = 0;
                        int noOnes = 0;
                        int no1 = 0;
                        for (int k = 0; k < ValueMatrix[i][j].length; k++) {
                            if (ValueMatrix[i][j][k] == 0) {
                                noZeros += 1 * Math.pow(Pointforspecies[k], 20);
                                no0++;
                            } else {
                                noOnes += 1 * Math.pow(Pointforspecies[k], 20);
                                no1++;
                            }

                        }
                        index += (no1 * noZeros + no0 * noOnes) / 2 / 12 / Pointforspecies.length;

                    }

                }

                else {
                    for (int j = 0; j < ValueMatrix[i].length; j++) {
                        int noZeros = 0;
                        double sumLine = 0;
                        for (int k = 0; k < ValueMatrix[i][j].length; k++) {
                            if (ValueMatrix[i][j][k] == 0)
                                noZeros++;
                                //THIS IS THE PART THAT COULD BE MODIFIED TO GET SOMETHING BETTER !!!
                            else
                                sumLine += ValueMatrix[i][j][k] * Math.pow(Pointforspecies[k], 20);
                        }
                        index += sumLine * noZeros / Pointforspecies.length;
                    }
                }
                EfficiencyIndex[i] = index;
        }
        }


        return IndexMaxInArray(EfficiencyIndex);
    }

    // Alex's maximal loss algorythm.
    public static int algorythm2(double[][][] ValueMatrix,double[] Pointforspecies,boolean[] AlredyAskedQuest){
        double[] EfficiencyIndex=new double[ValueMatrix[0][0].length];
        double max=0;
        for(int i=0;i<Pointforspecies.length;i++){
            if(Pointforspecies[i]>max)
                max=Pointforspecies[i];
        }


        for(int i=0;i<ValueMatrix.length;i++) {
            int minRej = ValueMatrix[0][0].length;
            if(!AlredyAskedQuest[i]){

                for (int j = 0; j < ValueMatrix[i].length; j++) {
                    int noZeros = 0;

                    for (int k = 0; k < ValueMatrix[i][j].length; k++) {
                        if(Pointforspecies[k]==max) {
                            if (ValueMatrix[i][j][k] == 0)
                                noZeros++;
                        }
                    }
                    if(noZeros<minRej)
                        minRej=noZeros;
                }
                EfficiencyIndex[i] = minRej;
            }
        }


        return IndexMaxInArray(EfficiencyIndex);
    }

    public static int RandAlgo(boolean[] AlredyAskedQuest) {
        int oneSum = 0;
        for (int i = 0; i < AlredyAskedQuest.length; i++) {
            if (AlredyAskedQuest[i]==false)
                oneSum++;
        }
        int rand = (int) (Math.random() * oneSum);
        int match = 0;
        for (int i = 0; i < AlredyAskedQuest.length; i++) {
            if (AlredyAskedQuest[i] == false) {
                if (match == rand)
                    return i;
                match++;
            }
        }
        return 32;
    }
    // Choooses a random answer that is correct or false for the simulation.
    public static int randomAnswerChooseWithError(int questionNo, double [][][] ValuesMatrix, int speciesno,int ErrorFreq){
        int randErr=(int) (Math.random()*ErrorFreq);
        if (randErr==1||ErrorFreq==1){
            int oneSum=0;
            for(int i=0;i<ValuesMatrix[questionNo].length;i++){
                if(ValuesMatrix[questionNo][i][speciesno]==0)
                    oneSum++;
            }
            int rand= (int) (Math.random()*oneSum);
            int match=0;
            for(int i=0;i<ValuesMatrix[questionNo].length;i++){
                if(ValuesMatrix[questionNo][i][speciesno]==0) {
                    if (match == rand)
                        return i+1;
                    match++;
                }
            }
        }

        else{
            int oneSum = 0;
            for (int i = 0; i < ValuesMatrix[questionNo].length; i++) {
                if (ValuesMatrix[questionNo][i][speciesno] != 0)
                    oneSum++;
            }
            int rand = (int) (Math.random() * oneSum);
            int match = 0;
            for (int i = 0; i < ValuesMatrix[questionNo].length; i++) {
                if (ValuesMatrix[questionNo][i][speciesno] != 0) {
                    if (match == rand)
                        return i + 1;
                    match++;
                }
            }
        }

        return -1;
    }

    //The method you need to call to start normal "game" where te computer figures out the plant for you.
    public static void userQuestions(int[] PresetQuest) throws  IOException {
        int rowno = 169; // Total Rown Number for the DB matrix
        int colno = 179; // Total Collumn Number for the DB matrix
        int QuestionNo = 36;
        int TotalAnswers = 14; //94;//14;

        String[][] DataBase;
        //DataBase = ReadDBnow("Database.csv", rowno, colno);
        DataBase = ReadDBnow("Database2.csv",rowno,colno);
        String[] CriteriaMatrix = FindCriteriaMatrix(DataBase, QuestionNo);
        String[][] SpeciesMatrix = resizeArray(FindSpeciesMatrix(DataBase, QuestionNo, TotalAnswers));
        double[][][] ValuesMatrix = integerArray(reszeArray(FindValuesMatrix(DataBase, QuestionNo, TotalAnswers)));
        String[] AllSpecies= All177Species(DataBase);
        double[] noPoints= new double[AllSpecies.length];
        for(int i=0; i<noPoints.length;i++)
            noPoints[i]=1;
        boolean[] alreadyAskedQuest=new boolean[CriteriaMatrix.length];
        boolean isThere=false;


        int YesFlowers=1;
        int YesFruits=1;



        int ChoiceQuest=31;

        int Answ=0;

        for(int i=0; !allTrue(alreadyAskedQuest);i++){

            while(Answ==0&&!allTrue(alreadyAskedQuest)) {
                alreadyAskedQuest[ChoiceQuest] = true;
                String PrintedString =CriteriaMatrix[ChoiceQuest] + ":";


                if(ChoiceQuest==34&&ChoiceQuest==35){
                    PrintedString+="What month was the plant collected:";

                }
                    for (int j = 0; j < SpeciesMatrix[ChoiceQuest].length; j++) {
                        PrintedString += "\n" + (j + 1) + ". " + SpeciesMatrix[ChoiceQuest][j];
                    }


                Answ= Integer.parseInt(JOptionPane.showInputDialog(PrintedString+"\nWhat category is the plant in ? (put in the number, if you don't know put in 0)"));
                //System.out.println("\nWhat category is the plant in ? (put in the number, if you don't know put in 0)");
                //Answ = scanner.nextInt();


                if(Answ==0) {
                    
                    if(PresetQuest[0]==0)
                        ChoiceQuest = algorythm(ValuesMatrix, noPoints, alreadyAskedQuest);
                    i++;
                    if(PresetQuest[0]!=0)
                        ChoiceQuest=PresetQuest[i]-1;
                }






            }


            if(ChoiceQuest==34) {
                YesFlowers = Integer.parseInt(JOptionPane.showInputDialog("Can you see the flower? If no type 0, if yes type 1"));
                if (YesFlowers == 1) {
                    for (int j = 0; j < noPoints.length; j++) {
                        if (ValuesMatrix[ChoiceQuest][Answ - 1][j] != 0) {
                            noPoints[j]++;
                        }
                    }
                } else {
                    for (int j = 0; j < noPoints.length; j++) {
                        if (ValuesMatrix[ChoiceQuest][Answ - 1][j] == 0) {
                            noPoints[j]++;
                        }
                    }
                }
            }
            else if(ChoiceQuest==35){
                YesFruits=Integer.parseInt(JOptionPane.showInputDialog("Can you see the fruit? If no type 0, if yes type 1"));
                if (YesFruits == 1) {
                    for (int j = 0; j < noPoints.length; j++) {
                        if (ValuesMatrix[ChoiceQuest][Answ - 1][j] != 0) {
                            noPoints[j]++;
                        }
                    }
                } else {
                    for (int j = 0; j < noPoints.length; j++) {
                        if (ValuesMatrix[ChoiceQuest][Answ - 1][j] == 0) {
                            noPoints[j]++;
                        }
                    }
                }
            }


else {
                for (int j = 0; j < noPoints.length; j++) {
                    if (ValuesMatrix[ChoiceQuest][Answ - 1][j] != 0) {
                        noPoints[j]++;
                    }
                }
            }

            int PossAnsw=IndexMaxInArray(noPoints);
            boolean finnish=true;
            for(int j=0;j<noPoints.length;j++){
                if(j!=PossAnsw && noPoints[PossAnsw]-1<noPoints[j]){
                    finnish=false;
                }
            }
            if(finnish||isThere)
                break;

            String printSpec="";
            for(int g=0;g<noPoints.length;g++){
                if(noPoints[PossAnsw]==noPoints[g]) {
                    printSpec += AllSpecies[g] + ",";

                }
            }


            BufferedReader reader= new BufferedReader(new FileReader("AllMutlipleTrouble.txt"));

            String thisLine;

            while ((thisLine = reader.readLine()) != null){

                if(thisLine.equals(printSpec)&&thisLine!="") {
                    isThere = true;
                }

            }
            reader.close();

            Answ=0;

            if(PresetQuest[0]!=0)
                ChoiceQuest=PresetQuest[i+1]-1;
            else
                ChoiceQuest=algorythm(ValuesMatrix,noPoints, alreadyAskedQuest);


        }
        //System.out.println("The Species you are looking at is: "+AllSpecies[IndexMaxInArray(noPoints)]);
        //JOptionPane.showInputDialog("The Species you are looking at is: "+AllSpecies[IndexMaxInArray(noPoints)]);

        String FinalAnsw="";
        for(int g=0;g<AllSpecies.length;g++){
            if(noPoints[IndexMaxInArray(noPoints)]==noPoints[g])
                FinalAnsw+=AllSpecies[g]+" ";
        }

        JOptionPane.showMessageDialog(null,"The Species you are looking at is/are: "+FinalAnsw);
    }


    public static void questWithCoord() throws IOException{
        int rowno = 169; // Total Rown Number for the DB matrix
        int colno = 179; // Total Collumn Number for the DB matrix
        int QuestionNo = 36;
        int TotalAnswers = 14; //94;//14;
        String[][]Coordinates = ReadDBnow("Coordinates.csv",7613,4);


        String[][] DataBase;

        DataBase = ReadDBnow("Database2.csv",rowno,colno);
        String[] CriteriaMatrix = FindCriteriaMatrix(DataBase, QuestionNo);
        String[][] SpeciesMatrix = resizeArray(FindSpeciesMatrix(DataBase, QuestionNo, TotalAnswers));
        double[][][] ValuesMatrix = integerArray(reszeArray(FindValuesMatrix(DataBase, QuestionNo, TotalAnswers)));
        String[] AllSpecies= All177Species(DataBase);
        double[][][] coordinates=integerArray(reszeArray(coordinatesData(Coordinates,AllSpecies)));


        double[] noPoints= new double[AllSpecies.length];
        boolean[] alreadyAskedQuest=new boolean[CriteriaMatrix.length];

        double LAT= Double.parseDouble(JOptionPane.showInputDialog("Put in your X coordinate"));
        double LONG=Double.parseDouble(JOptionPane.showInputDialog("Put in your Y coordinate"));

        double R=6371;

        double min;
        double lat1=Math.toRadians(LAT);
        double lat2;
        double Dlat;
        double Dlon;
        double a;
        double r;
        for(int i=0;i<coordinates.length;i++){
            min=20000;
            for(int j=0;j<coordinates[i].length;j++){
                lat2=Math.toRadians(coordinates[i][j][0]);
                Dlat=lat2-lat1;
                Dlon=Math.toRadians(coordinates[i][j][1]-LONG);
                a=Math.sin(Dlat/2)*Math.sin(Dlat/2)+Math.cos(lat1)*Math.cos(lat2)*Math.sin(Dlon/2)*Math.sin(Dlon/2);
                r=R*2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));
                if(r<min)
                    min=r;

            }
            noPoints[i]=1/(min/2500+1);
        }
        for(int i=0;i<noPoints.length;i++){
            System.out.println(AllSpecies[i]+" :"+noPoints[i]);
        }



        /*

        int ChoiceQuest=31;

        int Answ=0;

        for(int i=0; i<CriteriaMatrix.length+1;i++){
            while(Answ==0&&!allTrue(alreadyAskedQuest)) {
                alreadyAskedQuest[ChoiceQuest] = true;
                String PrintedString =CriteriaMatrix[ChoiceQuest] + ":";
                //System.out.println(CriteriaMatrix[ChoiceQuest] + ":");

                for (int j = 0; j < SpeciesMatrix[ChoiceQuest].length; j++) {
                    //System.out.println(j + 1 + ". " + SpeciesMatrix[ChoiceQuest][j]);
                    PrintedString+="\n"+(j + 1)+ ". " + SpeciesMatrix[ChoiceQuest][j];
                }


                Answ= Integer.parseInt(JOptionPane.showInputDialog(PrintedString+"\nWhat category is the plant in ? (put in the number, if you don't know put in 0)"));
                //System.out.println("\nWhat category is the plant in ? (put in the number, if you don't know put in 0)");
                //Answ = scanner.nextInt();

                if(Answ==0) {
                    ChoiceQuest = algorythm(ValuesMatrix, noPoints, alreadyAskedQuest);
                    i++;
                }




            }

            for(int j=0;j<noPoints.length;j++){
                if( ValuesMatrix[ChoiceQuest][Answ-1][j]!=0){
                    noPoints[j]++;
                }
            }

            int PossAnsw=IndexMaxInArray(noPoints);
            boolean finnish=true;
            for(int j=0;j<noPoints.length;j++){
                if(j!=PossAnsw && noPoints[PossAnsw]-1<noPoints[j]){
                    finnish=false;
                }
            }
            if(finnish)
                break;
            Answ=0;

            ChoiceQuest=algorythm(ValuesMatrix,noPoints, alreadyAskedQuest);


        }
        //System.out.println("The Species you are looking at is: "+AllSpecies[IndexMaxInArray(noPoints)]);
        //JOptionPane.showInputDialog("The Species you are looking at is: "+AllSpecies[IndexMaxInArray(noPoints)]);
        JOptionPane.showMessageDialog(null,"The Species you are looking at is: "+AllSpecies[IndexMaxInArray(noPoints)]);
        */
    }

    // simulation
    public static double simulations(int algorythm, int errFreq, int numberSimul, int randOrd, int[] PresetQuest) throws IOException{
        int rowno = 169; // Total Rown Number for the DB matrix
        int colno = 179; // Total Collumn Number for the DB matrix
        int QuestionNo = 36;
        int TotalAnswers = 14; //94;//14;
        int totAnswerReplies=0;
        int AnswRepPerSpe=0;

        String[][] DataBase;
        DataBase = ReadDBnow("Database2.csv", rowno, colno);
        String[] CriteriaMatrix = FindCriteriaMatrix(DataBase, QuestionNo);
        String[][] SpeciesMatrix = resizeArray(FindSpeciesMatrix(DataBase, QuestionNo, TotalAnswers));
        double[][][] ValuesMatrix = integerArray(reszeArray(FindValuesMatrix(DataBase, QuestionNo, TotalAnswers)));
        String[] AllSpecies = All177Species(DataBase);
        for (int n=0;n<numberSimul;n++) {
            for (int s = 0; s < AllSpecies.length; s++) {
                boolean isThere=false;
                double[] noPoints = new double[AllSpecies.length];
                for (int i = 0; i < noPoints.length; i++)
                    noPoints[i] = 1;

                boolean[] alreadyAskedQuest = new boolean[CriteriaMatrix.length];
                int ChoiceQuest;
                if(randOrd==1)
                    ChoiceQuest = 31;
                else
                    ChoiceQuest=RandAlgo(alreadyAskedQuest);


                for (int i = 0; AnswRepPerSpe < CriteriaMatrix.length; i++) {
                    AnswRepPerSpe++;
                    alreadyAskedQuest[ChoiceQuest] = true;
                    //System.out.println(CriteriaMatrix[ChoiceQuest] + ":");
                    for (int j = 0; j < SpeciesMatrix[ChoiceQuest].length; j++) {
                        //System.out.println(j + 1 + ". " + SpeciesMatrix[ChoiceQuest][j]);
                    }
                    //System.out.println("\nWhat category is the plant in ? (put in the number)");
                    int Answ = randomAnswerChooseWithError(ChoiceQuest, ValuesMatrix, s, errFreq);
                    while (Answ == -1&&!allTrue(alreadyAskedQuest)) {
                        AnswRepPerSpe++;
                        i++;
                        alreadyAskedQuest[ChoiceQuest] = true;

                        if(PresetQuest[0]!=0)
                            ChoiceQuest=PresetQuest[i+1]-1;
                        else if (randOrd == 0) {
                            if (algorythm == 1)
                                ChoiceQuest = algorythm(ValuesMatrix, noPoints, alreadyAskedQuest);
                            else if (algorythm == 2)
                                ChoiceQuest = algorythm2(ValuesMatrix, noPoints, alreadyAskedQuest);
                        } else {
                            ChoiceQuest = randOrd;
                        }
                        Answ = randomAnswerChooseWithError(ChoiceQuest, ValuesMatrix, s, errFreq);
                    }
                    //System.out.println(Answ);

                    for (int j = 0; j < noPoints.length; j++) {
                        if (ValuesMatrix[ChoiceQuest][Answ - 1][j] != 0) {
                            noPoints[j]++;
                        }
                    }

                    int PossAnsw = IndexMaxInArray(noPoints);
                    boolean finnish = true;
                    for (int j = 0; j < noPoints.length; j++) {
                        if (j != PossAnsw && noPoints[PossAnsw] - 1 < noPoints[j]) {
                            finnish = false;
                        }
                    }


                    if ((finnish && PossAnsw == s)||(isThere&&noPoints[IndexMaxInArray(noPoints)]==noPoints[s]))
                        break;



                    String printSpec="";
                    for(int g=0;g<noPoints.length;g++){
                        if(noPoints[IndexMaxInArray(noPoints)]==noPoints[g]) {
                            printSpec += AllSpecies[g] + ",";

                        }
                    }


                    BufferedReader reader= new BufferedReader(new FileReader("AllMutlipleTrouble.txt"));

                    String thisLine;

                    while ((thisLine = reader.readLine()) != null){

                        if(thisLine.equals(printSpec)&&thisLine!="") {
                            isThere = true;
                        }

                    }
                    reader.close();


                    //ADDS DOUBLESPECIES TO LIST
/*
                    if(AnswRepPerSpe==34){
                        BufferedReader reader= new BufferedReader(new FileReader("AllMutlipleTrouble.txt"));
                        String printSpec="";
                        for(int g=0;g<noPoints.length;g++)
                            if(noPoints[IndexMaxInArray(noPoints)]==noPoints[g]) {
                                printSpec+=AllSpecies[g]+",";
                            }
                        boolean alreadyThere=false;
                        String thisLine=null;

                        while ((thisLine = reader.readLine()) != null){

                            if(thisLine.equals(printSpec)) {
                                alreadyThere = true;
                            }

                        }
                        reader.close();
                        PrintWriter writer = new PrintWriter(new FileWriter("AllMutlipleTrouble.txt", true));

                        if(!alreadyThere)
                            writer.println(printSpec);
                        writer.close();
                    }
                    */

                    if(PresetQuest[0]!=0&&i<33)
                        ChoiceQuest=PresetQuest[i+1]-1;
                    else if (randOrd == 1) {
                        if (algorythm == 1)
                            ChoiceQuest = algorythm(ValuesMatrix, noPoints, alreadyAskedQuest);
                        else if (algorythm == 2)
                            ChoiceQuest = algorythm2(ValuesMatrix, noPoints, alreadyAskedQuest);
                    }
                    else
                        ChoiceQuest=RandAlgo(alreadyAskedQuest);

                }

                // CHECH FOR DOUBLE SPECIES
                /*
                String whatToPrint="";
                for (int q=0;q<AllSpecies.length;q++){
                    if(noPoints[q]==noPoints [IndexMaxInArray(noPoints)]){
                        //System.out.print(AllSpecies[q]+", ");
                        whatToPrint+=AllSpecies[q]+", ";
                    }
                }
                if(whatToPrint.length()>10){
                  System.out.print(whatToPrint);
                    System.out.println(AnswRepPerSpe);
                }
                */

                //System.out.println(AnswRepPerSpe);
                //System.out.println(AllSpecies[s]+" "+AllSpecies[IndexMaxInArray(noPoints)]+" :"+AnswRepPerSpe);
                totAnswerReplies += AnswRepPerSpe;
                AnswRepPerSpe = 0;


                //PRINTS THE SPECIES
                /*
                String printSpec="";
                for(int g=0;g<noPoints.length;g++){
                    if(noPoints[IndexMaxInArray(noPoints)]==noPoints[g]) {
                        printSpec += AllSpecies[g] + ",";

                    }
                }
                System.out.println(AllSpecies[s]+" " + printSpec);
                */

            }
        }
        //System.out.println("Average n° of questions: "+avg);
        return ((double) totAnswerReplies) / AllSpecies.length/numberSimul;

    }

    public static void main(String[] args) throws IOException {



        // If you want to play the normal game, uncomment userQuestions. And comment the rest.

        //questWithCoord();

        int[] noOrder={0};
        int[] Order={32,18,26,33,22,1,6,5,30,25,4,23,13,17,9,20,21,8,7,27,31,19,10,28,16,14,12,15,11,2,3,34,29,24};
        userQuestions(noOrder);

        /*Calculates the average n° of questions used for each method,

        -simulation1() is with the Database with ones and zeros (Alex's preffered one) and the algorythm we made.
        -simulation2() is with the Database with 1,0.5,0.3333,0 (Julian's preffered one) and the algorythm we made.
        -simulation3() is with the Database with 1,0.5,0.3333,0 (Julian's preffered one) and with Alex's idea of minimum loss.

        The simulations returns the average number of questions asked for each species (around 9 to 10)
        This can vary quite a bit because in the simulation when there is multiple choice possible, the computer chooses
        randomly so in 2 runs, you can get two different amount of questions asked for a same species.

         */




        //int numSimul=1;
        //int numErr=0;

        //System.out.println("There is on average "+simulations(1,numErr,numSimul,1,noOrder)+" without order.");
        //System.out.println("There is on average "+simulations(1,numErr,numSimul,1,Order)+" with order.");
        //System.out.println("There is on average "+simulations(1,numErr,numSimul,1)+" if asked not randomly.");
        //System.out.println("There is on average "+simulations(1,numErr,numSimul,0)+" if asked randomly.");



    }


}
